require 'async'

module UserCommands

  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞
  DISCOUNT = 5

  def handle_start_command(bot, message)
    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    existing_user = DB[:users].first(telegram_id: message.chat.id)

    if existing_user
      bot.api.send_message(chat_id: message.chat.id, text: '–ê –º—ã –≤–∞—Å –ø–æ–º–Ω–∏–º:3')
      # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    else
      phone = message.contact&.phone_number

      if phone.nil?
        Async do
          bot.api.send_message(chat_id: message.chat.id, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
          response = Async do
            bot.listen do |user_phone|
              if user_phone.is_a?(Telegram::Bot::Types::Message) && user_phone.from.id == message.from.id
                phone = user_phone.text
                break
              end
            end
          end
          response.wait
        end
      end

      birthday = ''
      Async do
        bot.api.send_message(chat_id: message.chat.id, text: '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:')
        response = Async do
          bot.listen do |user_birthday|
            if user_birthday.is_a?(Telegram::Bot::Types::Message) && user_birthday.from.id == message.from.id
              birthday = user_birthday.text
              break
            end
          end
        end
        response.wait
      end

      name = ''
      Async do
        bot.api.send_message(chat_id: message.chat.id, text: '–ö–∞–∫ –∫ –í–∞–º –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–≤–µ–¥–∏—Ç–µ –∏–º—è)')
        response = Async do
          bot.listen do |user_name|
            if user_name.is_a?(Telegram::Bot::Types::Message) && user_name.from.id == message.from.id
              name = user_name.text
              break
            end
          end
        end
        response.wait
      end

      DB[:users].insert(
        telegram_id: message.chat.id,
        nickname: message.from.username || '',
        name: name,
        phone: phone,
        birthday: birthday
      )

      bot.api.send_message(chat_id: message.chat.id, text: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
    end
  end

  def show_commands_list(bot, message)
    commands = [
      '/start - –ù–∞—á–∞—Ç—å',
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
      '/gen - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥',
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    ]

    response = "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
    response += commands.join("\n")

    bot.api.send_message(chat_id: message.chat.id, text: response)
  end

  def admin?(message)
    user_id = if message.is_a?(Telegram::Bot::Types::CallbackQuery)
                DB[:users].first(telegram_id: message.from.id)
              elsif message.is_a?(Telegram::Bot::Types::Message)
                DB[:users].first(telegram_id: message.chat.id)
              end

    user_id && user_id[:admin]
  end

  def send_command_list(bot, chat_id)
    commands = [
      { command: '/next', description: '–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É' },
      { command: '/cancel', description: '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é' },
      { command: '/newlocation', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ' },
      { command: '/newrule', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ' }
    ]

    buttons = commands.map { |cmd| Telegram::Bot::Types::InlineKeyboardButton.new(text: cmd[:command], callback_data: cmd[:command]) }
    keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(inline_keyboard: buttons.each_slice(2).to_a)

    bot.api.send_message(chat_id: chat_id, text: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:', reply_markup: keyboard)
  end

  def handle_user_enter_code(bot, message)
    #Async do
      bot.api.send_message(chat_id: message.chat.id, text: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:')

      # response = Async do
        bot.listen do |incoming_message|
          if incoming_message.is_a?(Telegram::Bot::Types::Message) && incoming_message.from.id == message.from.id
            entered_code = incoming_message.text.to_s.upcase

            barista_code = DB[:daily_codes].first(code: entered_code)
            if barista_code.nil?
              bot.api.send_message(chat_id: message.chat.id, text: '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–æ–¥')
            else
              status = barista_code[:activate?] ? '–ê–ö–¢–ò–í–ò–†–û–í–ê–ù' : '–ù–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù'
              if status == '–ù–ï–ê–ö–¢–ò–í–ò–†–û–í–ê–ù'
                user = get_user(message)
                if user
                  temp_count = 0

                  unless check_birthday(user[:birthday])
                    updated_discount = user[:all_discount] + 1

                    # –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω–Ω–æ–≥–æ –∫–æ—Ñ–µ
                    DB[:users].where(telegram_id: user[:telegram_id]).update(all_discount: updated_discount)

                    # –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ activate? = true
                    DB[:daily_codes].where(code: barista_code[:code]).update(activate?: true)

                    user = get_user(message)

                    rounded = rounded_count_discount(user[:all_discount])
                    remains = rounded - user[:all_discount]
                    temp_count = DISCOUNT - (rounded - user[:all_discount])
                  end

                  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ
                  if check_birthday(user[:birthday])
                    # –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–¥ –∫–∞–∫ –±–æ–Ω—É—Å–Ω—ã–π
                    DB[:daily_codes].where(code: barista_code[:code]).update(bonus?: true)

                    bot.api.send_message(chat_id: message.chat.id, text: "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–¥. " \
                    "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å ‚ù§ \n\n" \
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í–∞—Å —Å –î–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ —Å–∫–∏–¥–∫–∞ 15%\n" \
                    "ü§© #{barista_code[:code]}"
                    )

                    bot.api.send_message(chat_id: barista_code[:user_telegram_id], text: "–°–µ–≥–æ–¥–Ω—è —É –∫–ª–∏–µ–Ω—Ç–∞ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è #{user[:name]} #{user[:phone]} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ 15%. –ö–æ–¥ - #{barista_code[:code]}")
                  elsif temp_count == DISCOUNT
                    bot.api.send_message(chat_id: message.chat.id, text: "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–¥. " \
                    "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å ‚ù§ \n\n" \
                    "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –æ—á–µ—Ä–µ–¥–Ω–æ–π 5-—ã–π –∫–æ—Ñ–µ, –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ —Å–∫–∏–¥–∫–∞ 15%\n" \
                    "ü§© #{barista_code[:code]}"
                    )

                    bot.api.send_message(chat_id: barista_code[:user_telegram_id], text: "–ö–ª–∏–µ–Ω—Ç—É #{user[:name]} #{user[:phone]} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–∫–∞ 15%. –ö–æ–¥ - #{barista_code[:code]}")
                  else
                    bot.api.send_message(chat_id: message.chat.id, text: "‚úÖ –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–æ–¥. " \
                    "–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ, –∫–∞–∫ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –í–∞—Å –≤–∏–¥–µ—Ç—å ‚ù§ \n\n" \
                    "#{temp_count} / #{DISCOUNT}. –ï—â–µ #{remains} –∫–æ—Ñ–µ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –≤ 15%!"
                    )
                  end

                  # –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞, –∫—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–æ–¥
                  DB[:daily_codes].where(code: barista_code[:code]).update(client_id: user[:telegram_id])
                end
              else
                bot.api.send_message(chat_id: message.chat.id, text: "‚ùå —ç—Ç–æ—Ç –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: #{entered_code}")
              end
            end
            break
          end
        end
        #end
      #response.wait
      #end
  end

  private

  # –æ–∫—Ä—É–≥–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—Ñ–µ –¥–æ —á–∏—Å–ª–∞ –∫—Ä–∞—Ç–Ω–æ–≥–æ 5. 12 => 15
  def rounded_count_discount(num)
    return 0 if num == 0

    (num.to_f / DISCOUNT).ceil * DISCOUNT
  end

  # –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  def get_user(message)
    DB[:users].first(telegram_id: message.chat.id)
  end

  # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
  def check_birthday(birthday)
    Time.now.strftime("%d.%m") == Date.parse(birthday).strftime("%d.%m") ? true : false
  end
end
